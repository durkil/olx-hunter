package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"olx-hunter/internal/database"
	"olx-hunter/internal/scraper"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api *tgbotapi.BotAPI
	db  *database.DB
}

type FilterCreationState struct {
	Step int
	Data map[string]string
}

var creationStates = make(map[int64]*FilterCreationState)

func NewBot(token string, db *database.DB) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	api.Debug = false

	log.Printf("Bot is authorized as: @%s", api.Self.UserName)

	return &Bot{
		api: api,
		db:  db,
	}, nil
}

func (b *Bot) Start() {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := b.api.GetUpdatesChan(updateConfig)

	log.Println("Bot is started! Waiting for message...")

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		}
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	user, err := b.db.CreateOrUpdateUser(
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
	)
	if err != nil {
		log.Printf("Error creating user: %v", err)
		b.sendMessage(message.Chat.ID, "Server error. Try later")
		return
	}

	log.Printf("Message from: %s (@%s) - %s", user.FirstName, user.Username, message.Text)

	if message.IsCommand() {
		switch message.Command() {
		case "start":
			b.handleStart(message)
		case "help":
			b.handleHelp(message)
		case "list":
			b.handleList(message)
		case "create":
			b.handleCreate(message)
		default:
			b.handleUnknown(message)
		}
	} else {
		b.handleText(message)
	}
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	welcomeText := `üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ OLX!

üîç –©–æ —è –≤–º—ñ—é:
‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
‚Ä¢ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü—ñ–∫–∞–≤—ñ –∑–Ω–∞—Ö—ñ–¥–∫–∏

üìù –ö–æ–º–∞–Ω–¥–∏:
/help - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏
/list - –º–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∏

–ü–æ—á–Ω–µ–º–æ! üöÄ`

	b.sendMessage(message.Chat.ID, welcomeText)
}

func (b *Bot) handleHelp(message *tgbotapi.Message) {
	helpText := `üìö –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

üè† –û—Å–Ω–æ–≤–Ω—ñ:
/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

üîç –§—ñ–ª—å—Ç—Ä–∏:
/list - –ø–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∏
/create - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä (–ø–æ–∫—Ä–æ–∫–æ–≤–æ)

üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —à—É–∫–∞—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ!`

	b.sendMessage(message.Chat.ID, helpText)
}

func (b *Bot) handleUnknown(message *tgbotapi.Message) {
	text := `‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ` + message.Command() + `

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.`

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleText(message *tgbotapi.Message) {
	state, exists := creationStates[message.From.ID]
	if !exists {
		text := `üí¨ –Ø –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "` + message.Text + `"

–ê–ª–µ —è –ø–æ–∫–∏ —â–æ –ø—Ä–∞—Ü—é—é —Ç—ñ–ª—å–∫–∏ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏. –°–ø—Ä–æ–±—É–π /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —â–æ —è –≤–º—ñ—é! ü§ñ`

		b.sendMessage(message.Chat.ID, text)
		return
	}

	switch state.Step {
	case 1:
		state.Data["name"] = message.Text
		state.Step++
		b.sendMessage(message.Chat.ID, "üîç –í–≤–µ–¥–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, iphone-15):")
	case 2:
		state.Data["query"] = message.Text
		state.Step++
		b.sendMessage(message.Chat.ID, "üí∞ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ (–∞–±–æ 0):")
	case 3:
		state.Data["min_price"] = message.Text
		state.Step++
		b.sendMessage(message.Chat.ID, "üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ (–∞–±–æ 0):")
	case 4:
		state.Data["max_price"] = message.Text
		state.Step++
		b.sendMessage(message.Chat.ID, "üèô –ú—ñ—Å—Ç–æ (–∞–±–æ –∑–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ–º, –∞–±–æ –≤–≤–µ–¥–∏ -):")
	case 5:
		city := strings.TrimSpace(message.Text)
		if city == "-" {
			city = ""
		}
		state.Data["city"] = city
		
		name := strings.TrimSpace(state.Data["name"])
		query := strings.TrimSpace(state.Data["query"])
		minPriceStr := strings.TrimSpace(state.Data["min_price"])
		maxPriceStr := strings.TrimSpace(state.Data["max_price"])

		minPrice := 0
		if minPriceStr != "0" {
			var err error
			minPrice, err = strconv.Atoi(minPriceStr)
			if err != nil {
				b.sendMessage(message.Chat.ID, "‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
				delete(creationStates, message.From.ID)
				return
			}
		}

		maxPrice := 0
		if maxPriceStr != "0" {
			var err error
			maxPrice, err = strconv.Atoi(maxPriceStr)
			if err != nil {
				b.sendMessage(message.Chat.ID, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
				delete(creationStates, message.From.ID)
				return
			}
		}

		if minPrice < 0 || maxPrice < 0 {
		b.sendMessage(message.Chat.ID, "‚ùå –¶—ñ–Ω–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏!")
		return
		}

		if minPrice > maxPrice && maxPrice > 0 {
			b.sendMessage(message.Chat.ID, "‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É!")
			return
		}

		user, err := b.db.GetUserByTelegramID(message.From.ID)
		if err != nil || user == nil {
			b.sendMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
			delete(creationStates, message.From.ID)
			return
		}

		createdFilter, err := b.db.CreateFilter(user.ID, name, query, minPrice, maxPrice, city)
		if err != nil {
			log.Printf("Error creating filter: %v", err)
			b.sendMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
			delete(creationStates, message.From.ID)
			return
		}

		successText := fmt.Sprintf(`‚úÖ –§—ñ–ª—å—Ç—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!

üìã **%s**
üîç –ó–∞–ø–∏—Ç: %s`, createdFilter.Name, createdFilter.Query)

		if createdFilter.MinPrice > 0 || createdFilter.MaxPrice > 0 {
			successText += "\nüí∞ –¶—ñ–Ω–∞: "
            if createdFilter.MinPrice > 0 && createdFilter.MaxPrice > 0 {
                successText += fmt.Sprintf("%d - %d –≥—Ä–Ω", createdFilter.MinPrice, createdFilter.MaxPrice)
            } else if createdFilter.MinPrice > 0 {
                successText += fmt.Sprintf("–≤—ñ–¥ %d –≥—Ä–Ω", createdFilter.MinPrice)
            } else {
                successText += fmt.Sprintf("–¥–æ %d –≥—Ä–Ω", createdFilter.MaxPrice)
            }
        } else {
            successText += "\nüí∞ –¶—ñ–Ω–∞: –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å"
        }

		if createdFilter.City != "-" {
			successText += fmt.Sprintf("\nüèô –ú—ñ—Å—Ç–æ: %s", createdFilter.City)
		}

		successText += "\n\nüü¢ –§—ñ–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"

		b.sendMessage(message.Chat.ID, successText)
		delete(creationStates, message.From.ID)
	}
}

func (b *Bot) handleList(message *tgbotapi.Message) {
	user, err := b.db.GetUserByTelegramID(message.From.ID)
	if err != nil || user == nil {
		b.sendMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
		return
	}

	filters, err := b.db.GetUserFilters(user.ID)
	if err != nil {
		log.Printf("Error getting user filters %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø–æ—à—É–∫—É")
		return
	}

	if len(filters) == 0 {
		text := `üìù –£ —Ç–µ–±–µ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.

–°—Ç–≤–æ—Ä–∏ –ø–µ—Ä—à–∏–π —Ñ—ñ–ª—å—Ç—Ä –∫–æ–º–∞–Ω–¥–æ—é:
/add iPhone15;iphone-15;25000;35000;–∫–∏—ó–≤

–§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞;–∑–∞–ø–∏—Ç;–º—ñ–Ω_—Ü—ñ–Ω–∞;–º–∞–∫—Å_—Ü—ñ–Ω–∞;–º—ñ—Å—Ç–æ`

		b.sendMessage(message.Chat.ID, text)
		return
	}

	text := fmt.Sprintf("üìã –¢–≤–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∏ (%d):\n\n", len(filters))

	for i, filter := range filters {
		status := "üü¢"
		if !filter.IsActive {
			status = "üî¥"
		}

		text += fmt.Sprintf("%s **%d.** %s\n", status, i+1, filter.Name)
		text += fmt.Sprintf("   üîç –ó–∞–ø–∏—Ç: `%s`\n", filter.Query)

		if filter.MinPrice > 0 || filter.MaxPrice > 0 {
			priceRange := ""
			if filter.MinPrice > 0 && filter.MaxPrice > 0 {
				priceRange = fmt.Sprintf("%d - %d –≥—Ä–Ω", filter.MinPrice, filter.MaxPrice)
			} else if filter.MinPrice > 0 {
				priceRange = fmt.Sprintf("–≤—ñ–¥ %d –≥—Ä–Ω", filter.MinPrice)
			} else {
				priceRange = fmt.Sprintf("–¥–æ %d –≥—Ä–Ω", filter.MaxPrice)
			}
			text += fmt.Sprintf("   üí∞ –¶—ñ–Ω–∞: %s\n", priceRange)
		}

		if filter.City != "" {
			text += fmt.Sprintf("   üèô –ú—ñ—Å—Ç–æ: %s\n", filter.City)
		}

		text += "\n"
	}

	text += "üü¢ –∞–∫—Ç–∏–≤–Ω–∏–π | üî¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π"

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleCreate(message *tgbotapi.Message) {

	creationStates[message.From.ID] = &FilterCreationState{
		Step: 1,
		Data: make(map[string]string),
	}
	b.sendMessage(message.Chat.ID, "üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å—Ç—Ä–∞:")
}