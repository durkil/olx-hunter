package bot

import (
	"log"

	"olx-hunter/internal/database"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api *tgbotapi.BotAPI
	db *database.DB
}

func NewBot(token string, db *database.DB) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	api.Debug = false

	log.Printf("Bot is authorized as: @%s", api.Self.UserName)

	return &Bot{
		api: api,
		db: db,
	}, nil
}

func (b *Bot) Start() {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := b.api.GetUpdatesChan(updateConfig)

	log.Println("Bot is started! Waitning for message...")

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		}
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	user, err := b.db.CreateOrUpdateUser(
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
	)
	if err != nil {
		log.Printf("Error creating user: %v", err)
		b.sendMessage(message.Chat.ID, "Server error. Try later")
		return
	}

	log.Printf("Message from: %s (@%s) - %s", user.FirstName, user.Username, message.Text)

	if message.IsCommand() {
		switch message.Command() {
		case "start":
			b.handleStart(message)
		case "help":
			b.handleHelp(message)
		default:
			b.handleUnknown(message)
		}
	} else {
		b.handleText(message)
	}
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	welcomeText := `üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ OLX!

üîç –©–æ —è –≤–º—ñ—é:
‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
‚Ä¢ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü—ñ–∫–∞–≤—ñ –∑–Ω–∞—Ö—ñ–¥–∫–∏

üìù –ö–æ–º–∞–Ω–¥–∏:
/help - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏
/list - –º–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∏

–ü–æ—á–Ω–µ–º–æ! üöÄ`

	b.sendMessage(message.Chat.ID, welcomeText)
}

func (b *Bot) handleHelp(message *tgbotapi.Message) {
	helpText := `üìö –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

üè† –û—Å–Ω–æ–≤–Ω—ñ:
/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

üîç –§—ñ–ª—å—Çÿ±Ÿä:
/list - –ø–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∏
/add - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä

–ü—Ä–∏–∫–ª–∞–¥:
/add "iPhone 15" iphone-15 25000 35000 –∫–∏—ó–≤

üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —à—É–∫–∞—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ!`

	b.sendMessage(message.Chat.ID, helpText)
}

func (b *Bot) handleUnknown(message *tgbotapi.Message) {
	text := `‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ` + message.Command() + `–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.`
	
	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleText(message *tgbotapi.Message) {
	text := `üí¨ –Ø –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "` + message.Text + `"

–ê–ª–µ —è –ø–æ–∫–∏ —â–æ –ø—Ä–∞—Ü—é—é —Ç—ñ–ª—å–∫–∏ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏. –°–ø—Ä–æ–±—É–π /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —â–æ —è –≤–º—ñ—é! ü§ñ`

	b.sendMessage(message.Chat.ID, text)
}